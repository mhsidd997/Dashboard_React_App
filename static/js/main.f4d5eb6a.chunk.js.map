{"version":3,"sources":["components/WidgetText.js","components/WidgetBar.js","components/WidgetDoughnut.js","components/WidgetColumn.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["WidgetText","props","className","title","value","description","ReactFC","fcRoot","FusionCharts","Chart","FusionTheme","WidgetBar","chartConfigs","type","width","height","dataFormat","dataSource","chart","bgColor","theme","data","WidgetDoughnut","WidgetColumn","config","url","Dashboard","getData","arg","arr","state","items","arrlen","length","organicSource","directSource","referralSource","pageViews","users","newUsers","socialSource","sessions","numofSessions","pageSessions","sessionTime","bounceRate","sourceArr","usersArr","socialArr","statsArr","i","organic_source","direct_source","referral_source","page_views","new_users","social_source","num_of_Sessions","page_Sessions","session_time","bounce_rate","push","label","setState","updateDashboard","event","selectedValue","console","log","dropdownOptions","fetch","then","response","json","batchRowValues","valueRanges","values","rows","rowObject","j","month","Array","from","Set","reverse","Container","fluid","Row","Col","options","this","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4d5eb6a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction WidgetText(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"widgetWrap\">\r\n                    <div className=\"widgetTitle\">\r\n                        {props.title}\r\n                    </div>\r\n                    <div className=\"widgetValue\">\r\n                        <div className=\"value\">{props.value}</div>\r\n                        <div className=\"description\">{props.description}</div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WidgetText;\r\n","import React from 'react';\r\nimport ReactFC from 'react-fusioncharts';\r\nimport FusionCharts from 'fusioncharts';\r\nimport Chart from \"fusioncharts/fusioncharts.charts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\nReactFC.fcRoot(FusionCharts,Chart,FusionTheme);\r\n\r\nfunction WidgetBar(props) {\r\n\r\n    const chartConfigs = {\r\n        type: \"bar2d\", // The chart type\r\n        width: \"100%\", // Width of the chart\r\n        height: \"125\", // Height of the chart\r\n        dataFormat: \"json\", // Data type\r\n        dataSource: {\r\n          // Chart Configuration\r\n          chart: {\r\n            bgColor : \"#2a2a2a\",\r\n            theme: \"fusion\" //Set the theme for your chart\r\n          },\r\n          // Chart Data - from step 2\r\n          data: props.data\r\n        }\r\n      };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"widgetWrap\">\r\n                    <div className=\"widgetTitle\">\r\n                        {props.title}\r\n                    </div>\r\n                    <div className=\"widgetValue\">\r\n                        <ReactFC {...chartConfigs}/>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WidgetBar;\r\n","import React from 'react';\r\nimport ReactFC from 'react-fusioncharts';\r\nimport FusionCharts from 'fusioncharts';\r\nimport Chart from \"fusioncharts/fusioncharts.charts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\nReactFC.fcRoot(FusionCharts,Chart,FusionTheme);\r\n\r\nfunction WidgetDoughnut(props) {\r\n\r\n    const chartConfigs = {\r\n        type: \"doughnut2d\", // The chart type\r\n        width: \"100%\", // Width of the chart\r\n        height: \"125\", // Height of the chart\r\n        dataFormat: \"json\", // Data type\r\n        dataSource: {\r\n          // Chart Configuration\r\n          chart: {\r\n            bgColor : \"#2a2a2a\",\r\n            theme: \"fusion\" //Set the theme for your chart\r\n          },\r\n          // Chart Data - from step 2\r\n          data: props.data\r\n        }\r\n      };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"widgetWrap\">\r\n                    <div className=\"widgetTitle\">\r\n                        {props.title}\r\n                    </div>\r\n                    <div className=\"widgetValue\">\r\n                        <ReactFC {...chartConfigs}/>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WidgetDoughnut;\r\n","import React from 'react';\r\nimport ReactFC from 'react-fusioncharts';\r\nimport FusionCharts from 'fusioncharts';\r\nimport Chart from \"fusioncharts/fusioncharts.charts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\nReactFC.fcRoot(FusionCharts,Chart,FusionTheme);\r\n\r\nfunction WidgetColumn(props) {\r\n\r\n    const chartConfigs = {\r\n        type: \"column3d\", // The chart type\r\n        width: \"100%\", // Width of the chart\r\n        height: \"150\", // Height of the chart\r\n        dataFormat: \"json\", // Data type\r\n        dataSource: {\r\n          // Chart Configuration\r\n          chart: {\r\n            bgColor : \"#2a2a2a\",\r\n            theme: \"fusion\" //Set the theme for your chart\r\n          },\r\n          // Chart Data - from step 2\r\n          data: props.data\r\n        }\r\n      };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"widgetWrap\">\r\n                    <div className=\"widgetTitle\">\r\n                        {props.title}\r\n                    </div>\r\n                    <div className=\"widgetValue\">\r\n                        <ReactFC {...chartConfigs}/>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WidgetColumn;\r\n","import React, { Component } from 'react'\r\nimport './dashboard.css';\r\nimport { Col, Row, Container } from 'react-bootstrap';\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport WidgetText from './WidgetText';\r\nimport WidgetBar from './WidgetBar';\r\nimport WidgetDoughnut from './WidgetDoughnut';\r\nimport WidgetColumn from './WidgetColumn';\r\n\r\n//excel import\r\nconst config = {\r\n    apiKey: 'AIzaSyDMu-Vw30ykPPmFT3cXeunzKEi4EahzglI',\r\n    spreadsheetId: '1vcDPrMexD8bxNwwzK9IxF8wch6Hfezq2eooJACDiqgg'\r\n}\r\nconst url = `https://sheets.googleapis.com/v4/spreadsheets/${config.spreadsheetId\r\n    }/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=${config.apiKey}`;\r\n\r\nclass Dashboard extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            items:[],\r\n            dropdownOptions: [],\r\n            selectedValue: null,\r\n            organicSource: null,\r\n            directSource: null,\r\n            referralSource: null,\r\n            pageViews:null,\r\n            users: null,\r\n            newUsers: null,\r\n            socialSource: null,\r\n            sessions: null,\r\n            numofSessions: null,\r\n            pageSessions: null,\r\n            sessionTime:null,\r\n            bounceRate:null,\r\n            sourceArr: [],\r\n            usersArr: [],\r\n            socialArr: [],\r\n            statsArr: []\r\n        }\r\n    }\r\n\r\n    getData= arg => {\r\n        const arr = this.state.items;\r\n        const arrlen = arr.length;\r\n\r\n        let selectedValue = 0;\r\n        let organicSource = 0;\r\n        let directSource = 0;\r\n        let referralSource = 0;\r\n        let pageViews = 0;\r\n        let users = 0;\r\n        let newUsers = 0;\r\n        let socialSource = 0;\r\n        let sessions = 0;\r\n        let numofSessions = 0;\r\n        let pageSessions = 0;\r\n        let sessionTime = 0;\r\n        let bounceRate = 0;\r\n        let sourceArr = [];\r\n        let usersArr = [];\r\n        let socialArr = [];\r\n        let statsArr = [];\r\n\r\n        for(let i=0;i<arrlen;i++){\r\n             if(arg === arr[i][\"month\"]){\r\n                 organicSource = arr[i].organic_source;\r\n                 directSource = arr[i].direct_source;\r\n                 referralSource = arr[i].referral_source;\r\n                 pageViews = arr[i].page_views;\r\n                 users = arr[i].users;\r\n                 newUsers = arr[i].new_users;\r\n                 socialSource = arr[i].social_source;\r\n                 sessions = arr[i].sessions;\r\n                 numofSessions = arr[i].num_of_Sessions;\r\n                 pageSessions = arr[i].page_Sessions;\r\n                 sessionTime = arr[i].session_time;\r\n                 bounceRate = arr[i].bounce_rate;\r\n                 sourceArr.push(\r\n                    {\r\n                        label: \"Organic Source\",\r\n                        value: arr[i].organic_source\r\n                    },\r\n                    {\r\n                        label: \"Direct Source\",\r\n                        value: arr[i].direct_source\r\n                    },\r\n                    {\r\n                        label: \"Referral Source\",\r\n                        value: arr[i].referral_source\r\n                    }\r\n                )\r\n                usersArr.push(\r\n                    {\r\n                        label: \"Users\",\r\n                        value: arr[i].users\r\n                    },\r\n                    {\r\n                        label: \"New Users\",\r\n                        value: arr[i].new_users\r\n                    }\r\n                )\r\n                socialArr.push(\r\n                    {\r\n                        label: \"Social Source\",\r\n                        value: arr[i].social_source\r\n                    },\r\n                    {\r\n                        label: \"Page Views\",\r\n                        value: arr[i].page_views\r\n                    }\r\n                )\r\n                statsArr.push(\r\n                    {\r\n                        label: \"Number Of Sessions\",\r\n                        value: arr[i].sessions\r\n                    },\r\n                    {\r\n                        label: \"Pages Per Sessions\",\r\n                        value: arr[i].page_views\r\n                    }\r\n                )\r\n            }\r\n        }\r\n        selectedValue = arg;\r\n\r\n        this.setState({\r\n           organicSource: organicSource,\r\n           directSource: directSource,\r\n           referralSource: referralSource,\r\n           pageViews: pageViews,\r\n           users: users,\r\n           socialSource: socialSource,\r\n           newUsers: newUsers,\r\n           sessions: sessions,\r\n           numofSessions: numofSessions,\r\n           pageSessions: pageSessions,\r\n           sessionTime: sessionTime,\r\n           bounceRate: bounceRate,\r\n           sourceArr: sourceArr,\r\n           usersArr: usersArr,\r\n           socialArr: socialArr,\r\n           statsArr: statsArr\r\n        }\r\n        )\r\n    }\r\n\r\n    updateDashboard = event => {\r\n        this.getData(event.value);\r\n        this.setState({selectedValue:event.value}, () => {\r\n            console.log(this.state.organicSource)\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                \r\n                let batchRowValues = data.valueRanges[0].values;\r\n                const rows = [];\r\n\r\n                for (let i = 1; i < batchRowValues.length; i++) {\r\n                    let rowObject = {};\r\n                    for (let j = 0; j < batchRowValues[i].length; j++) {\r\n                        rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\r\n                    }\r\n                    rows.push(rowObject);\r\n                }\r\n\r\n                // dropdown options\r\n                let dropdownOptions = [];\r\n\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    dropdownOptions.push(rows[i].month);\r\n                }\r\n\r\n                dropdownOptions = Array.from(new Set(dropdownOptions)).reverse();\r\n                this.setState(\r\n                    {\r\n                        items: rows,\r\n                        dropdownOptions: dropdownOptions,\r\n                        selectedValue: \"Jan 2018\"\r\n                    },\r\n                    () => this.getData(\"Jan 2018\")\r\n                );\r\n            });\r\n    }\r\n\r\nrender() {\r\n    return (\r\n            <div>\r\n                <Container fluid>\r\n                    <Row className=\"TopHeader\">\r\n                        <Col>\r\n                            Dashboard\r\n                        </Col>\r\n                        <Col>\r\n                           <Dropdown options={this.state.dropdownOptions} onChange={this.updateDashboard} value={this.state.selectedValue} placeholder=\"Select an option\" />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <Container className=\"mainDashboard\" fluid>\r\n                    <Row>\r\n                        <Col>\r\n                            <WidgetText title=\"Organic Source\" value={this.state.organicSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetText title=\"Direct Source\" value={this.state.directSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetText title=\"Referral Source\" value={this.state.referralSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetText title=\"Page Views\" value={this.state.pageViews} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <WidgetText title=\"Users\" value={this.state.organicSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetText title=\"New Users\" value={this.state.organicSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetBar title=\"Source Comparison\" data={this.state.sourceArr}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetDoughnut title=\"Users Comparison\" data={this.state.usersArr}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetColumn title=\"Social-Page Views Comparison\" data={this.state.socialArr}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetBar title=\"Sessions-Pages Comparison\" data={this.state.statsArr}/>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}